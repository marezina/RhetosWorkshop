Module Bookstore
{

    SqlView ActiveEmployees <SQL\ActivePersons.sql>
    {
        SqlDependsOn Bookstore.Person;
        AutodetectSqlDependencies;
    }

    SqlQueryable ActiveEmployeesQ
        "SELECT * FROM ActiveEmployees"
    {
        SqlDependsOnView Bookstore.ActiveEmployees;
    }

    Computed ExpectedBookRating 'repository =>
        {
            var books = repository.Bookstore.Book.Query()
                .Select(b =>
                    new
                    {
                        b.ID,
                        b.Title,
                        IsForeign = b.Extension_ForeignBook.ID != null
                    })
                .ToList();

            var ratings = new List<ExpectedBookRating>();
            foreach (var book in books)
            {
                decimal rating = 0;

                if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 100;

                if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                    rating += 50;

                if (book.IsForeign)
                    rating *= 1.2m;

                ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
            }

            return ratings.ToArray();
        }'
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

    Entity Book
    {
        ShortString Code { Unique; Required; }
        ShortString Title { Required; }
        Integer NumberOfPages { MaxValue 5000; }
        Reference Author Bookstore.Person;
        Reference AssignedTo Bookstore.Employee;

        RowPermissions
        {

            AllowRead EveryoneCanRead 'context =>
                {
                    return book => book.AssignedTo.ID != null;
                }';

            // Better:
            AllowRead EveryoneCanRead2 'context =>
                {
                    return book => true;
                }';

            // Shorter:
            AllowRead EveryoneCanRead3 'context => book => true';

            //====================

            Allow OwnerCanWrite 'context =>
                {
                    Guid employeeId = context.Repository
                        .Bookstore.Employee.Query()
                        .Where(e => e.UserName == context.UserInfo.UserName)
                        .Select( e => e.ID)
                        .SingleOrDefault();
                    return book => book.AssignedTo.ID == employeeId;
                }';

            // Better:
            AllowWrite OwnerCanWrite2 'context =>
                {
                    return book => book.AssignedTo.UserName == context.UserInfo.UserName;
                }';
        }

        ItemFilter LongBooks 'item => item.NumberOfPages >= 110';

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity". Please use "curiosity" instead.';

        ItemFilter ForeignAuthorXWithComments 'item =>
            item.Author.Name.StartsWith("X")
            && item.Extension_ForeignBook.ID != null
            && _domRepository.Bookstore.Comment.Subquery.Where(c => c.BookID == item.ID).Count() >= 3';

        ComposableFilterBy LongBooks2 '(query, repository, parameter) =>
            {
                return query.Where(item => item.NumberOfPages >= 110);
            }';

        ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
            {
                var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
                return filtered;
            }';

         FilterBy ComplexSearch '(repository, parameter) =>
            {
                var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    query = query.Where(item => item.Extension_ForeignBook.ID != null);
                Book[] books = query.ToSimple().ToArray();

                if (parameter.MaskTitles == true)
                    foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                        book.Title = book.Title.First() + "***" + book.Title.Last();

                return books;
            }';

        ComposableFilterBy 'System.String[]' '(query, repository, titles) =>
            {
                return query.Where(book => titles.Contains(book.Title));
            }';

        ComposableFilterBy 'Bookstore.Person' '(query, repository, author) =>
            {
                return query.Where(book => book.AuthorID == author.ID
                    || book.Author.Name == author.Name);
            }';

        Logging { AllProperties; }
    }

    Parameter LongBooks2
    {
    }

    Parameter LongBooks3
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }

     Entity Disposal
    {
        Reference Book { Required; }
        LongString Explanation { Required; }
        DateTime EffectiveSince { CreationTime; }

        ItemFilter ImportantBookExplanation 'item => item.Book.Title.Contains("important") && item.Explanation.Length < 50';
        InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.';

        ItemFilter HighRating 'item => item.Book.Extension_BookRating.Rating > 100';
        InvalidData HighRating 'You are not allowed to dispose a book with rating above 100.';
    }

    Entity BookRating
    {
        Extends Bookstore.Book;
        Decimal Rating;
    }

    Entity Person
    {
        
        Deactivatable;
        ShortString Name;
        Logging;
    }

    Entity Comment
    {
        Reference Book { Detail; }
        LongString Text;
        DateTime Created { CreationTime; }
        DateTime Modified { ModificationTimeOf Bookstore.Comment.Text; }
        RowPermissions
        {
            AllowRead EveryoneCanRead 'context =>
                {
                    return comment => comment.Book.AssignedTo.ID != null;
                }';

            Allow OwnerCanWrite 'context =>
                {
                    Guid employeeId = context.Repository
                        .Bookstore.Employee.Query()
                        .Where(e => e.UserName == context.UserInfo.UserName)
                        .Select(e => e.ID)
                        .SingleOrDefault();

                    return comment => comment.Book.AssignedTo.ID == employeeId;
                }';

            // Better:
            InheritFrom Bookstore.Comment.Book;
        }
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }

    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Entity Employee
    {
        ShortString UserName;
        ShortString VATNumber { Unique; }
        DateTime LastUpdate { DefaultValue 'item => null'; }

        SaveMethod
        {
            Initialization UpdateLastUpdate
                '
                    foreach (var item in updatedNew)
                        item.LastUpdate = DateTime.Now;
                ';
        }
    }

    Entity TestCodeTable
    {
        CodeTable;
        MonitoredRecord;
    }

    Entity Manager
    {
        Extends Bookstore.Employee;

        ShortString AdditionalInfo;
    }

    Entity EducationRecord
    {
        Date RecordDate { DefaultValue 'item => DateTime.Now.Date'; }
        ShortString Description;

        Reference Employee { Detail; }
    }

    Entity Department
    {
        DenyUserEdit;
        ShortString Code { Unique; }
        ShortString Description;
        DateTime Created { CreationTime; }
        MonitoredRecord;
    }

    Entity EmployeeDepartment
    {
        Reference Employee { Detail; }
        Reference Department { Required; }

        UniqueMultiple 'Employee Department';
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
        Take NumberOfComments 'Extension_BookInfo.NumberOfComments';
    }

     SqlQueryable TopicsForBook <SQL\TopicsForBook.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfTopics;

        AutodetectSqlDependencies;
    }
    
    SqlQueryable BookInfo <SQL\BookInfo.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

    Browse ListOfBooks Bookstore.Book
    {
        Take Title;
        Take 'Author.Name';
        Take NumberOfTopics 'Extension_TopicsForBook.NumberOfTopics';
    }

    Hardcoded Genre
    {
        LongString ShortDescription;
        Bool Fiction;

        Entry Fantasy
        {
            Value ShortDescription 'Fantasy is a genre of speculative fiction set in a fictional universe';
            Value Fiction 1;
        }

        Entry Crime
        {
            Value ShortDescription 'Suspense and mystery are key elements that are nearly ubiquitous to the genre';
            Value Fiction 0;
        }
    }

    Action Insert5Books
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < 5; i++)
            {
                var newBook = new Bookstore.Book { Code = "+++"+i, Title = "New book" };
                repository.Bookstore.Book.Insert(newBook);
            }
        }';

    Action InsertManyBooks
    '(parameter, repository, userInfo) =>
    {
        for (int i = 0; i < parameter.NumberOfBooks; i++)
        {
            string newTitle = parameter.Title;
            var newBook = new Bookstore.Book { Code = "B+++" + i, Title = newTitle };
            repository.Bookstore.Book.Insert(newBook);
        }
    }'
{
    Integer NumberOfBooks;
    ShortString Title;
}

}